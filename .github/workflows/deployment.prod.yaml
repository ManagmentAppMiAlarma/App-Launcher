name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main

jobs:
  avoid_redundancy:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Redundant Deployments
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{github.token}}

  build:
    runs-on: ubuntu-latest
    needs: avoid_redundancy
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          submodules: recursive
      - name: Authorize Git
        run: |
          git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git config --global user.name "$GITHUB_ACTOR"
      - name: Update submodules
        run: |
          git submodule update --init --recursive --remote -f
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      - name: Creating .env file
        run: |
          echo "CLIENT_GATEWAY_PORT=${{ secrets.CLIENT_GATEWAY_PORT }}" >> .env
          echo "NATS_SERVERS=${{ secrets.NATS_SERVERS }}" >> .env
          echo "CLIENT_MS_PORT=${{ secrets.CLIENT_MS_PORT }}" >> .env
          echo "MONGO_CLIENT_URL=${{ secrets.MONGO_CLIENT_URL }}" >> .env
          echo "AUTH_MS_PORT=${{ secrets.AUTH_MS_PORT }}" >> .env
          echo "MONGO_AUTH_URL=${{ secrets.MONGO_AUTH_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "ORDERS_MS_PORT=${{ secrets.ORDERS_MS_PORT }}" >> .env
          echo "POSGRESQL_ORDERS_URL=${{ secrets.POSGRESQL_ORDERS_URL }}" >> .env
          echo "FRONTEND_PORT=${{ secrets.FRONTEND_PORT }}" >> .env
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
      - name: Build Docker images
        run: |
          docker build -f client-api-gateway/Dockerfile.prod -t aguekdjian/client-api-gateway-prod ./client-api-gateway
          docker build -f clients-ms/Dockerfile.prod -t aguekdjian/clients-ms-prod ./clients-ms
          docker build -f auth-ms/Dockerfile.prod -t aguekdjian/auth-ms-prod ./auth-ms
          docker build -f orders-ms/Dockerfile.prod -t aguekdjian/orders-ms-prod ./orders-ms
          docker build -f Frontend-App/Dockerfile.prod -t aguekdjian/frontend ./Frontend-App
      - name: Push Docker images to Docker Hub
        run: |
          docker push aguekdjian/client-api-gateway-prod
          docker push aguekdjian/clients-ms-prod
          docker push aguekdjian/auth-ms-prod
          docker push aguekdjian/orders-ms-prod
          docker push aguekdjian/frontend

  deploy:
    runs-on: aws-ec2-mialarma-app
    needs: build
    steps:
      - name: Stop Docker Compose
        run: docker compose -f docker-compose.prod.yml down
      - name: Remove old Docker images
        run: |
          docker rmi aguekdjian/client-api-gateway-prod
          docker rmi aguekdjian/clients-ms-prod
          docker rmi aguekdjian/auth-ms-prod
          docker rmi aguekdjian/orders-ms-prod
          docker rmi aguekdjian/frontend
      - name: Start Docker Compose with new images
        run: docker compose -f docker-compose.prod.yml up -d
